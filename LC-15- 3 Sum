https://leetcode.com/problems/3sum/description/

func threeSum(_ nums: [Int]) -> [[Int]] {
        var sortedNums = nums.sorted()
        var result: [[Int]] = []
        if nums.count < 3 { 
            return result
        } // length < 3 case
        let count = sortedNums.count
        var i = 0
        while (i < count - 2) {
            var j = i + 1
            var k = count - 1
            while i < j, j < k {
                let sum = sortedNums[i] + sortedNums[j] + sortedNums[k]
                if sum == 0 {
                    result.append([sortedNums[i], sortedNums[j], sortedNums[k]])
                    
                    j += 1
                    while j < count - 1, sortedNums[j-1] == sortedNums[j] {
                        j += 1
                    }
                    
                } else if (sortedNums[j] + sortedNums[k]) > -sortedNums[i] {
                    k -= 1
                    while k >= 0, sortedNums[k] == sortedNums[k+1] {
                        k -= 1
                    }
                } else {
                    j += 1
                    while j < count, sortedNums[j-1] == sortedNums[j] {
                        j += 1
                    }
                }
            }
            i += 1
            while i < count - 2, sortedNums[i-1] == sortedNums[i] {
                i += 1
            }
        }
        return result
    }
