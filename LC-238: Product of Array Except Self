func productExceptSelf(_ nums: [Int]) -> [Int] {
    var prefixArray: [Int] = nums
    var suffixArray: [Int] = nums
    var result: [Int] = nums
    
    for i in 0 ..< nums.count {
        if i == 0 {
            prefixArray[i] = 1
        } else {
            prefixArray[i] = prefixArray[i-1] * nums[i-1]
        }
    }
    for i in stride(from: nums.count - 1, to: -1, by: -1) {
        if i == nums.count - 1 {
            suffixArray[i] = 1
        } else {
            suffixArray[i] = suffixArray[i+1] * nums[i + 1]
        }
    }
    for i in 0 ..< nums.count {
        result[i] = prefixArray[i]*suffixArray[i]
    }
    return result
}

print(productExceptSelf([1,2,3,4]))
/**
 Input: nums = [1,2,3,4]
 Output: [24,12,8,6]
 
 pre: [1, 1, 2, 6]
 post: [24, 12, 4, 1]
 */
