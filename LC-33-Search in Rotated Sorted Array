https://leetcode.com/problems/search-in-rotated-sorted-array/description/

func BinarySearch(_ nums: [Int], _ target: Int, low: Int, high: Int) -> Int {
    if low > high {
        return -1
    }
    var mid = (low + high)/2
    if nums[low] == target {
        return low
    } else if nums[high] == target {
        return high
    } else if nums[mid] == target {
        return mid
    }
    print("lmh \(low) \(mid) \(high)")
    if (nums[low] == nums[mid]) && (nums[mid] == nums[high]) {
        // restrict search space
        var newLow = low + 1
        while newLow < high, nums[newLow] == nums [newLow - 1] {
            newLow += 1
        }
        if newLow >= high { return -1 }
        var newHigh = high - 1
        while newHigh > newLow, nums[newHigh] == nums[newHigh + 1] {
            newHigh -= 1
        }
        if newLow >= newHigh { return -1 }
        return BinarySearch(nums, target, low: newLow, high: newHigh)
    } else if (nums[low] < nums[mid]) && (target > nums[low]) && (target < nums[mid]) {
        // present in left sorted
        print("36")
        return BinarySearch(nums, target, low: low, high: mid - 1)
    } else if (nums[mid] < nums[high]) && (target > nums[mid]) && (target < nums[high]) {
        // present in right sorted
        print("40")
        return BinarySearch(nums, target, low: mid + 1, high: high)
    } else if (nums[low] < nums[mid]) {
        // present in other unsorted array
        print("44")
        return BinarySearch(nums, target, low: mid + 1, high: high)
    } else if (nums[mid] < nums[high]) {
        // present in other unsorted array
        print("48")
        return BinarySearch(nums, target, low: low, high: mid)
    }
    return -1
}
func search(_ nums: [Int], _ target: Int) -> Int {
    var low = 0
    var high = nums.count - 1
    return BinarySearch(nums, target, low: 0, high: high)
}

print(search([4,5,6,7,0,1,2], 3))
